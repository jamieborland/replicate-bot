# cogs/video_gen.pyimport ioimport asyncioimport replicateimport discordfrom discord.ext import commandsfrom utils.prompt_manager import get_prompt_by_indexfrom utils.image_manager import get_image_by_indexfrom utils.video_manager import add_videos  # Import the video managerclass VideoCog(commands.Cog):    def __init__(self, bot):        self.bot = bot    @commands.command()    async def video(self, ctx, *args):        """        Generate a video using the video model.        Usage examples:          1) Using a stored prompt and a stored image:             !video prompt[1] image[2] duration[10]          2) Using a stored prompt only (default 5 seconds):             !video prompt[1]          3) Using a direct prompt with a stored image:             !video A portrait photo of a woman underwater image[2] duration[5]          4) Using a direct prompt only:             !video A portrait photo of a woman underwater        The command accepts:          - Stored prompt markers (prompt[<index>])          - Image markers (image[<index>])          - A duration marker in the format duration[<5 or 10>]            (Only 5 or 10 seconds are allowed; default is 5 seconds if not specified.)        """        stored_prompt = None        image_url = None        direct_prompt_parts = []        # Default duration in seconds (only 5 or 10 are allowed)        duration_value = 5        # Parse the arguments.        for arg in args:            if arg.startswith("prompt[") and arg.endswith("]"):                try:                    idx = int(arg[len("prompt["):-1])                    stored_prompt = get_prompt_by_index(ctx.author.id, idx)                    if not stored_prompt:                        await ctx.send(f"No stored prompt found at index {idx}.")                        return                except ValueError:                    await ctx.send("Invalid prompt index format.")                    return            elif arg.startswith("image[") and arg.endswith("]"):                try:                    idx = int(arg[len("image["):-1])                    image_url = get_image_by_index(ctx.author.id, idx)                    if not image_url:                        await ctx.send(f"No stored image found at index {idx}.")                        return                except ValueError:                    await ctx.send("Invalid image index format.")                    return            elif arg.startswith("duration[") and arg.endswith("]"):                try:                    d = int(arg[len("duration["):-1])                    if d not in (5, 10):                        await ctx.send("Invalid duration. Duration can only be either 5 or 10 seconds.")                        return                    duration_value = d                except ValueError:                    await ctx.send("Invalid duration format. Please use duration[<5 or 10>].")                    return            else:                direct_prompt_parts.append(arg)                # Decide on the prompt: use stored prompt if provided; otherwise, join the remaining text.        prompt = stored_prompt if stored_prompt else " ".join(direct_prompt_parts).strip()        if not prompt:            await ctx.send("Please provide a prompt either as a stored prompt (prompt[<index>]) or as direct text.")            return        # Build the input for the video model.        video_input = {            "prompt": prompt,            "duration": duration_value,          # Duration in seconds (only 5 or 10 allowed)            "cfg_scale": 0.5,       # Default guidance flexibility            "aspect_ratio": "9:16", # Default aspect ratio            "negative_prompt": ""   # Default negative prompt        }        if image_url:            video_input["start_image"] = image_url        msg = await ctx.send(            f"Generating video with prompt: `{prompt}`" +            (f" using image from your stored images." if image_url else "") +            f" Duration: {duration_value} seconds."        )        try:            # Run the blocking replicate.run in a separate thread.            output = await asyncio.to_thread(                replicate.run,                "kwaivgi/kling-v1.6-standard",                input=video_input            )        except Exception as e:            await msg.edit(content=f"Video generation failed: {e}")            return        # Since output is a file-like object, read its contents.        video_bytes = output.read()        video_file = io.BytesIO(video_bytes)        # Send the video as an attachment to Discord.        sent = await ctx.send(            content="Video generated:",            file=discord.File(video_file, "output.mp4")        )        # Retrieve the attachment URL and store it using the video manager.        if sent.attachments:            video_url = sent.attachments[0].url            add_videos(ctx.author.id, [video_url])        await msg.delete()async def setup(bot):    await bot.add_cog(VideoCog(bot))