# cogs/video_gen.pyimport replicateimport discordfrom discord.ext import commandsfrom utils.prompt_manager import get_prompt_by_indexfrom utils.image_manager import get_image_by_indexfrom utils.video_manager import add_videos  # Import the video manager functionsclass VideoCog(commands.Cog):    def __init__(self, bot):        self.bot = bot    @commands.command()    async def video(self, ctx, *args):        """        Generate a video using the video model.        Usage examples:        1) Using a stored prompt and a stored image:           !video prompt[1] image[2]        2) Using a stored prompt with no image:           !video prompt[1]        3) Using a direct prompt with a stored image:           !video A portrait photo of a woman underwater image[2]        4) Using a direct prompt only:           !video A portrait photo of a woman underwater        The command accepts both stored prompt markers (prompt[<index>]) and image markers (image[<index>])        as well as direct text for the prompt.        """        stored_prompt = None        image_url = None        direct_prompt_parts = []        # Parse the arguments        for arg in args:            if arg.startswith("prompt[") and arg.endswith("]"):                try:                    idx = int(arg[len("prompt["):-1])                    stored_prompt = get_prompt_by_index(ctx.author.id, idx)                    if not stored_prompt:                        await ctx.send(f"No stored prompt found at index {idx}.")                        return                except ValueError:                    await ctx.send("Invalid prompt index format.")                    return            elif arg.startswith("image[") and arg.endswith("]"):                try:                    idx = int(arg[len("image["):-1])                    image_url = get_image_by_index(ctx.author.id, idx)                    if not image_url:                        await ctx.send(f"No stored image found at index {idx}.")                        return                except ValueError:                    await ctx.send("Invalid image index format.")                    return            else:                direct_prompt_parts.append(arg)                # Decide on the prompt: use stored prompt if provided; otherwise, join the remaining text.        prompt = stored_prompt if stored_prompt else " ".join(direct_prompt_parts).strip()        if not prompt:            await ctx.send("Please provide a prompt either as a stored prompt (prompt[<index>]) or as direct text.")            return        # Build the input for the video model.        video_input = {            "prompt": prompt,            "duration": 5,         # Default duration in seconds            "cfg_scale": 0.5,      # Default guidance flexibility            "aspect_ratio": "16:9",# Default aspect ratio            "negative_prompt": ""  # Default negative prompt        }        if image_url:            video_input["start_image"] = image_url        msg = await ctx.send(f"Generating video with prompt: `{prompt}`" +                              (f" using image from your stored images." if image_url else ""))        try:            # Call the video generation model.            # Note: The output is expected to be a URI.            output = replicate.run("kwaivgi/kling-v1.6-standard", input=video_input)        except Exception as e:            await msg.edit(content=f"Video generation failed: {e}")            return        # The output is a URI string.        video_url = output.strip()        await ctx.send(f"Video generated: {video_url}")        # Store the video URL using the video manager.        add_videos(ctx.author.id, [video_url])        await msg.delete()async def setup(bot):    await bot.add_cog(VideoCog(bot))